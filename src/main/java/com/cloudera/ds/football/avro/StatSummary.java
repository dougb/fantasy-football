/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.cloudera.ds.football.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class StatSummary extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"StatSummary\",\"namespace\":\"com.cloudera.ds.football.avro\",\"fields\":[{\"name\":\"mean\",\"type\":\"double\"},{\"name\":\"variance\",\"type\":\"double\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public double mean;
  @Deprecated public double variance;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public StatSummary() {}

  /**
   * All-args constructor.
   */
  public StatSummary(java.lang.Double mean, java.lang.Double variance) {
    this.mean = mean;
    this.variance = variance;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return mean;
    case 1: return variance;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: mean = (java.lang.Double)value$; break;
    case 1: variance = (java.lang.Double)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'mean' field.
   */
  public java.lang.Double getMean() {
    return mean;
  }

  /**
   * Sets the value of the 'mean' field.
   * @param value the value to set.
   */
  public void setMean(java.lang.Double value) {
    this.mean = value;
  }

  /**
   * Gets the value of the 'variance' field.
   */
  public java.lang.Double getVariance() {
    return variance;
  }

  /**
   * Sets the value of the 'variance' field.
   * @param value the value to set.
   */
  public void setVariance(java.lang.Double value) {
    this.variance = value;
  }

  /** Creates a new StatSummary RecordBuilder */
  public static com.cloudera.ds.football.avro.StatSummary.Builder newBuilder() {
    return new com.cloudera.ds.football.avro.StatSummary.Builder();
  }
  
  /** Creates a new StatSummary RecordBuilder by copying an existing Builder */
  public static com.cloudera.ds.football.avro.StatSummary.Builder newBuilder(com.cloudera.ds.football.avro.StatSummary.Builder other) {
    return new com.cloudera.ds.football.avro.StatSummary.Builder(other);
  }
  
  /** Creates a new StatSummary RecordBuilder by copying an existing StatSummary instance */
  public static com.cloudera.ds.football.avro.StatSummary.Builder newBuilder(com.cloudera.ds.football.avro.StatSummary other) {
    return new com.cloudera.ds.football.avro.StatSummary.Builder(other);
  }
  
  /**
   * RecordBuilder for StatSummary instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<StatSummary>
    implements org.apache.avro.data.RecordBuilder<StatSummary> {

    private double mean;
    private double variance;

    /** Creates a new Builder */
    private Builder() {
      super(com.cloudera.ds.football.avro.StatSummary.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.cloudera.ds.football.avro.StatSummary.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.mean)) {
        this.mean = data().deepCopy(fields()[0].schema(), other.mean);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.variance)) {
        this.variance = data().deepCopy(fields()[1].schema(), other.variance);
        fieldSetFlags()[1] = true;
      }
    }
    
    /** Creates a Builder by copying an existing StatSummary instance */
    private Builder(com.cloudera.ds.football.avro.StatSummary other) {
            super(com.cloudera.ds.football.avro.StatSummary.SCHEMA$);
      if (isValidValue(fields()[0], other.mean)) {
        this.mean = data().deepCopy(fields()[0].schema(), other.mean);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.variance)) {
        this.variance = data().deepCopy(fields()[1].schema(), other.variance);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'mean' field */
    public java.lang.Double getMean() {
      return mean;
    }
    
    /** Sets the value of the 'mean' field */
    public com.cloudera.ds.football.avro.StatSummary.Builder setMean(double value) {
      validate(fields()[0], value);
      this.mean = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'mean' field has been set */
    public boolean hasMean() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'mean' field */
    public com.cloudera.ds.football.avro.StatSummary.Builder clearMean() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'variance' field */
    public java.lang.Double getVariance() {
      return variance;
    }
    
    /** Sets the value of the 'variance' field */
    public com.cloudera.ds.football.avro.StatSummary.Builder setVariance(double value) {
      validate(fields()[1], value);
      this.variance = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'variance' field has been set */
    public boolean hasVariance() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'variance' field */
    public com.cloudera.ds.football.avro.StatSummary.Builder clearVariance() {
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public StatSummary build() {
      try {
        StatSummary record = new StatSummary();
        record.mean = fieldSetFlags()[0] ? this.mean : (java.lang.Double) defaultValue(fields()[0]);
        record.variance = fieldSetFlags()[1] ? this.variance : (java.lang.Double) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
